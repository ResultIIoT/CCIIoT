<clones>
<systeminfo processor="nicad6" system="volttron" granularity="functions" threshold="0%" minlines="5" maxlines="2500"/>
<cloneinfo npcs="2905" npairs="53"/>
<runinfo ncompares="83478" cputime="46"/>
<classinfo nclasses="29"/>

<class classid="1" nclones="3" nlines="6" similarity="100">
<source file="E:/Git/II/latest/volttron/deprecated/OpenEISHistorian/openeis/historian.py" startline="176" endline="186" pcid="78">
def main(argv=sys.argv):
    """
    Main method called by the eggsecutable.
    """
    try:
        utils.vip_main(historian, version=__version__)
    except Exception as e:
        print(e)
        _log.exception('unhandled exception')


</source>
<source file="E:/Git/II/latest/volttron/services/core/MQTTHistorian/mqtt_historian/agent.py" startline="148" endline="155" pcid="864">
def main(argv=sys.argv):
    try:
        utils.vip_main(historian, version=__version__)
    except Exception as e:
        print(e)
        _log.exception('unhandled exception')


</source>
<source file="E:/Git/II/latest/volttron/services/contrib/InfluxdbHistorian/influx/historian.py" startline="379" endline="389" pcid="478">
def main(argv=sys.argv):
    """Main method called by the eggsecutable.
    @param argv:
    """
    try:
        utils.vip_main(historian, version=__version__)
    except Exception as e:
        print(e)
        _log.exception('unhandled exception')


</source>
</class>

<class classid="2" nclones="2" nlines="6" similarity="100">
<source file="E:/Git/II/latest/volttron/examples/ListenerAgent/listener/agent.py" startline="118" endline="125" pcid="198">
def main(argv=sys.argv):
    '''Main method called by the eggsecutable.'''
    try:
        utils.vip_main(ListenerAgent, version=__version__)
    except Exception as e:
        _log.exception('unhandled exception')


</source>
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/platform_driver/interfaces/modbus_tk/tests/modbus_listener_agent.py" startline="149" endline="156" pcid="1020">
def main(argv=sys.argv):
    '''Main method called by the eggsecutable.'''
    try:
        utils.vip_main(ListenerAgent, version=__version__)
    except Exception as e:
        _log.exception('unhandled exception')


</source>
</class>

<class classid="3" nclones="2" nlines="5" similarity="100">
<source file="E:/Git/II/latest/volttron/examples/MarketAgents/AHUAgent/ahu/agent.py" startline="113" endline="118" pcid="201">
    def setup(self, sender, **kwargs):
        _log.debug('Subscribing to '+self.subscribing_topic)
        self.vip.pubsub.subscribe(peer='pubsub',
                                  prefix=self.subscribing_topic,
                                  callback=self.updateState)
								  
</source>
<source file="E:/Git/II/latest/volttron/examples/MarketAgents/VAVAgent/vav/agent.py" startline="127" endline="132" pcid="250">
    def setup(self, sender, **kwargs):
        _log.debug('Subscribing to '+self.subscribing_topic)
        self.vip.pubsub.subscribe(peer='pubsub',
                                  prefix=self.subscribing_topic,
                                  callback=self.updateState)
		
</source>
</class>

<class classid="4" nclones="2" nlines="7" similarity="100">
<source file="E:/Git/II/latest/volttron/examples/StandAloneFileWatcher/standalonefilewatchpublisher.py" startline="63" endline="70" pcid="308">
    def read_file(self, file):
        _log.debug('loading file %s', file)
        with open(file, 'r') as f:
            f.seek(self.file_end_position[file])
            for line in f:
                self.publish_file(line.strip(),self.file_topic[file])
            self.file_end_position[file] = self.get_end_position(f)

</source>
<source file="E:/Git/II/latest/volttron/services/ops/FileWatchPublisher/filewatchpublisher/agent.py" startline="126" endline="133" pcid="1402">
    def read_file(self, file):
        _log.debug('loading file %s', file)
        with open(file, 'r') as f:
            f.seek(self.file_end_position[file])
            for line in f:
                self.publish_file(line.strip(),self.file_topic[file])
            self.file_end_position[file] = self.get_end_position(f)

</source>
</class>

<class classid="5" nclones="3" nlines="9" similarity="100">
<source file="E:/Git/II/latest/volttron/services/contrib/MarketServiceAgent/tests/test_offer.py" startline="59" endline="67" pcid="559">
def create_demand_curve():
    demand_curve = PolyLine()
    price = 0
    quantity = 1000
    demand_curve.add(Point(price, quantity))
    price = 1000
    quantity = 0
    demand_curve.add(Point(price, quantity))
    return demand_curve
</source>
<source file="E:/Git/II/latest/volttron/volttrontesting/platform/base_market_agent/test_poly_line_factory.py" startline="94" endline="102" pcid="2594">
def create_demand_curve():
    demand_curve = PolyLine()
    price = 0
    quantity = 1000
    demand_curve.add(Point(price,quantity))
    price = 1000
    quantity = 0
    demand_curve.add(Point(price,quantity))
    return demand_curve
</source>
<source file="E:/Git/II/latest/volttron/volttrontesting/platform/base_market_agent/test_poly_line.py" startline="166" endline="174" pcid="2589">
def create_demand_curve():
    demand_curve = PolyLine()
    price = 0
    quantity = 1000
    demand_curve.add(Point(price,quantity))
    price = 1000
    quantity = 0
    demand_curve.add(Point(price,quantity))
    return demand_curve
</source>
</class>

<class classid="6" nclones="2" nlines="9" similarity="100">
<source file="E:/Git/II/latest/volttron/services/core/DataMover/tests/test_datamover.py" startline="83" endline="98" pcid="618">
def publish_agent(request, volttron_instances, forwarder):
    global volttron_instance1, volttron_instance2
    # 1: Start a fake agent to publish to message bus
    agent = volttron_instance1.build_agent(identity='test-agent')

    # 2: add a tear down method to stop sqlhistorian agent and the fake
    # agent that published to message bus
    def stop_agent():
        print("In teardown method of publish_agent")
        if isinstance(agent, Agent):
            agent.core.stop()

    request.addfinalizer(stop_agent)
    return agent


</source>
<source file="E:/Git/II/latest/volttron/services/core/ForwardHistorian/tests/test_forward_historian.py" startline="90" endline="106" pcid="804">
def publish_agent(request, volttron_instances, forwarder):
    global volttron_instance1, volttron_instance2

    # 1: Start a fake agent to publish to message bus
    agent = volttron_instance1.build_agent(identity='test-agent')

    # 2: add a tear down method to stop sqlhistorian agent and the fake
    # agent that published to message bus
    def stop_agent():
        print("In teardown method of publish_agent")
        if isinstance(agent, Agent):
            agent.core.stop()

    request.addfinalizer(stop_agent)
    return agent


</source>
</class>

<class classid="7" nclones="2" nlines="7" similarity="100">
<source file="E:/Git/II/latest/volttron/services/core/DataMover/tests/test_datamover.py" startline="100" endline="112" pcid="620">
def query_agent(request, volttron_instances, sqlhistorian):
    # 1: Start a fake agent to query the sqlhistorian in volttron_instance2
    agent = volttron_instance2.build_agent()

    # 2: add a tear down method to stop sqlhistorian agent and the fake agent that published to message bus
    def stop_agent():
        print("In teardown method of module")
        agent.core.stop()

    request.addfinalizer(stop_agent)
    return agent


</source>
<source file="E:/Git/II/latest/volttron/services/core/ForwardHistorian/tests/test_forward_historian.py" startline="108" endline="121" pcid="806">
def query_agent(request, volttron_instances, sqlhistorian):
    # 1: Start a fake agent to query the sqlhistorian in volttron_instance2
    agent = volttron_instance2.build_agent()

    # 2: add a tear down method to stop sqlhistorian agent and the fake
    # agent that published to message bus
    def stop_agent():
        print("In teardown method of module")
        agent.core.stop()

    request.addfinalizer(stop_agent)
    return agent


</source>
</class>

<class classid="8" nclones="2" nlines="9" similarity="100">
<source file="E:/Git/II/latest/volttron/services/core/DataMover/tests/test_datamover.py" startline="114" endline="126" pcid="622">
def sqlhistorian(request, volttron_instances):
    global volttron_instance1, volttron_instance2
    global sqlite_config
    # 1: Install historian agent
    # Install and start sqlhistorian agent in instance2
    agent_uuid = volttron_instance2.install_agent(
        agent_dir=get_services_core("SQLHistorian"),
        config_file=sqlite_config,
        start=True,
        vip_identity='platform.historian')
    print("sqlite historian agent id: ", agent_uuid)


</source>
<source file="E:/Git/II/latest/volttron/services/core/ForwardHistorian/tests/test_forward_historian.py" startline="123" endline="136" pcid="808">
def sqlhistorian(request, volttron_instances):
    global volttron_instance1, volttron_instance2
    global sqlite_config

    # 1: Install historian agent
    # Install and start sqlhistorian agent in instance2
    agent_uuid = volttron_instance2.install_agent(
        agent_dir=get_services_core("SQLHistorian"),
        config_file=sqlite_config,
        start=True,
        vip_identity='platform.historian')
    print("sqlite historian agent id: ", agent_uuid)


</source>
</class>

<class classid="9" nclones="2" nlines="8" similarity="100">
<source file="E:/Git/II/latest/volttron/services/core/DataMover/tests/test_datamover.py" startline="154" endline="163" pcid="624">
def publish(publish_agent, topic, header, message):
    if isinstance(publish_agent, Agent):
        publish_agent.vip.pubsub.publish('pubsub',
                                         topic,
                                         headers=header,
                                         message=message).get(timeout=10)
    else:
        publish_agent.publish_json(topic, header, message)


</source>
<source file="E:/Git/II/latest/volttron/services/core/ForwardHistorian/tests/test_forward_historian.py" startline="165" endline="174" pcid="810">
def publish(publish_agent, topic, header, message):
    if isinstance(publish_agent, Agent):
        publish_agent.vip.pubsub.publish('pubsub',
                                         topic,
                                         headers=header,
                                         message=message).get(timeout=10)
    else:
        publish_agent.publish_json(topic, header, message)


</source>
</class>

<class classid="10" nclones="2" nlines="34" similarity="100">
<source file="E:/Git/II/latest/volttron/services/core/DataMover/tests/test_datamover.py" startline="314" endline="377" pcid="628">
def test_analysis_topic(publish_agent, query_agent):
    """
    Test if devices topic message is getting forwarded to historian running on
    another instance. Test if topic name substitutions happened.
    Publish to topic
    'analysis/PNNL/BUILDING_1/Device/MixedAirTemperature' in volttron_instance1 and
    query for topic
    'PNNL/BUILDING1_ANON/Device/MixedAirTemperature' in volttron_instance2
    :param publish_agent: Fake agent used to publish messages to bus in
    volttron_instance1. Calling this fixture makes sure all the dependant
    fixtures are called to setup and start volttron_instance1 and forwareder
    agent and returns the  instance of fake agent to publish
    :param query_agent: Fake agent used to query sqlhistorian in
    volttron_instance2. Calling this fixture makes sure all the dependant
    fixtures are called to setup and start volttron_instance2 and sqlhistorian
    agent and returns the instance of a fake agent to query the historian
    """
    print("\n** test_analysis_topic **")
    # Publish fake data. The format mimics the format used by VOLTTRON drivers.
    # Make some random readings
    oat_reading = random.uniform(30, 100)
    mixed_reading = oat_reading + random.uniform(-5, 5)
    damper_reading = random.uniform(0, 100)

    # Create a message for all points.
    all_message = [{'OutsideAirTemperature': oat_reading,
                    'MixedAirTemperature': mixed_reading,
                    'DamperSignal': damper_reading},
                   {'OutsideAirTemperature': {'units': 'F', 'tz': 'UTC',
                                              'type': 'float'},
                    'MixedAirTemperature': {'units': 'F', 'tz': 'UTC',
                                            'type': 'float'},
                    'DamperSignal': {'units': '%', 'tz': 'UTC',
                                     'type': 'float'}
                    }]

    # Create timestamp
    now = utils.format_timestamp(datetime.utcnow())
    print("now is ", now)
    headers = {
        headers_mod.DATE: now,
        headers_mod.TIMESTAMP: now
    }
    # Publish messages
    publish(publish_agent, 'analysis/PNNL/BUILDING_1/Device', headers, all_message)
    gevent.sleep(0.5)

    # pytest.set_trace()
    # Query the historian
    result = query_agent.vip.rpc.call(
        'platform.historian',
        'query',
        topic='PNNL/BUILDING1_ANON/Device/MixedAirTemperature',
        start=now,
        order="LAST_TO_FIRST").get(timeout=10)
    print('Query Result', result)
    assert (len(result['values']) == 1)
    (now_date, now_time) = now.split("T")
    if now_time[-1:] == 'Z':
        now_time = now_time[:-1]
    assert (result['values'][0][0] == now_date + 'T' + now_time + '+00:00')
    assert (result['values'][0][1] == approx(mixed_reading))


</source>
<source file="E:/Git/II/latest/volttron/services/core/ForwardHistorian/tests/test_forward_historian.py" startline="226" endline="289" pcid="812">
def test_analysis_topic(publish_agent, query_agent):
    """
    Test if devices topic message is getting forwarded to historian running on
    another instance. Test if topic name substitutions happened.
    Publish to topic
    'analysis/PNNL/BUILDING_1/Device/MixedAirTemperature' in volttron_instance1 and
    query for topic
    'PNNL/BUILDING1_ANON/Device/MixedAirTemperature' in volttron_instance
    @param publish_agent: Fake agent used to publish messages to bus in
    volttron_instance1. Calling this fixture makes sure all the dependant
    fixtures are called to setup and start volttron_instance1 and forwareder
    agent and returns the  instance of fake agent to publish
    @param query_agent: Fake agent used to query sqlhistorian in
    volttron_instance. Calling this fixture makes sure all the dependant
    fixtures are called to setup and start volttron_instance and sqlhistorian
    agent and returns the instance of a fake agent to query the historian
    """
    print("\n** test_analysis_topic **")
    # Publish fake data. The format mimics the format used by VOLTTRON drivers.
    # Make some random readings
    oat_reading = random.uniform(30, 100)
    mixed_reading = oat_reading + random.uniform(-5, 5)
    damper_reading = random.uniform(0, 100)

    # Create a message for all points.
    all_message = [{'OutsideAirTemperature': oat_reading,
                    'MixedAirTemperature': mixed_reading,
                    'DamperSignal': damper_reading},
                   {'OutsideAirTemperature': {'units': 'F', 'tz': 'UTC',
                                              'type': 'float'},
                    'MixedAirTemperature': {'units': 'F', 'tz': 'UTC',
                                            'type': 'float'},
                    'DamperSignal': {'units': '%', 'tz': 'UTC',
                                     'type': 'float'}
                    }]

    # Create timestamp
    now = utils.format_timestamp(datetime.utcnow())
    print("now is ", now)
    headers = {
        headers_mod.DATE: now,
        headers_mod.TIMESTAMP: now
    }
    # Publish messages
    publish(publish_agent, 'analysis/PNNL/BUILDING_1/Device', headers, all_message)
    gevent.sleep(0.5)

    # pytest.set_trace()
    # Query the historian
    result = query_agent.vip.rpc.call(
        'platform.historian',
        'query',
        topic='PNNL/BUILDING1_ANON/Device/MixedAirTemperature',
        start=now,
        order="LAST_TO_FIRST").get(timeout=10)
    print('Query Result', result)
    assert (len(result['values']) == 1)
    (now_date, now_time) = now.split("T")
    if now_time[-1:] == 'Z':
        now_time = now_time[:-1]
    assert (result['values'][0][0] == now_date + 'T' + now_time + '+00:00')
    assert (result['values'][0][1] == approx(mixed_reading))


</source>
</class>

<class classid="11" nclones="2" nlines="27" similarity="100">
<source file="E:/Git/II/latest/volttron/services/core/DataMover/tests/test_datamover.py" startline="380" endline="436" pcid="629">
def test_analysis_topic_no_header(publish_agent, query_agent):
    """
    Test if devices topic message is getting forwarded to historian running on
    another instance. Test if topic name substitutions happened.
    Publish to topic
    'analysis/PNNL/BUILDING_1/Device/MixedAirTemperature' in volttron_instance1 and
    query for topic
    'PNNL/BUILDING1_ANON/Device/MixedAirTemperature' in volttron_instance2
    :param publish_agent: Fake agent used to publish messages to bus in
    volttron_instance1. Calling this fixture makes sure all the dependant
    fixtures are called to setup and start volttron_instance1 and forwareder
    agent and returns the  instance of fake agent to publish
    :param query_agent: Fake agent used to query sqlhistorian in
    volttron_instance2. Calling this fixture makes sure all the dependant
    fixtures are called to setup and start volttron_instance2 and sqlhistorian
    agent and returns the instance of a fake agent to query the historian
    """
    print("\n** test_analysis_topic **")
    # Publish fake data. The format mimics the format used by VOLTTRON drivers.
    # Make some random readings
    oat_reading = random.uniform(30, 100)
    mixed_reading = oat_reading + random.uniform(-5, 5)
    damper_reading = random.uniform(0, 100)

    # Create a message for all points.
    all_message = [{'OutsideAirTemperature': oat_reading,
                    'MixedAirTemperature': mixed_reading,
                    'DamperSignal': damper_reading},
                   {'OutsideAirTemperature': {'units': 'F', 'tz': 'UTC',
                                              'type': 'float'},
                    'MixedAirTemperature': {'units': 'F', 'tz': 'UTC',
                                            'type': 'float'},
                    'DamperSignal': {'units': '%', 'tz': 'UTC',
                                     'type': 'float'}
                    }]

    # Create timestamp
    now = datetime.utcnow().isoformat() + 'Z'
    print("now is ", now)

    # Publish messages
    publish(publish_agent, 'analysis/PNNL/BUILDING_1/Device', None, all_message)
    gevent.sleep(0.5)

    # pytest.set_trace()
    # Query the historian
    result = query_agent.vip.rpc.call(
        'platform.historian',
        'query',
        topic='PNNL/BUILDING1_ANON/Device/MixedAirTemperature',
        start=now,
        order="LAST_TO_FIRST").get(timeout=10)
    print('Query Result', result)
    assert (len(result['values']) == 1)
    assert (result['values'][0][1] == approx(mixed_reading))


</source>
<source file="E:/Git/II/latest/volttron/services/core/ForwardHistorian/tests/test_forward_historian.py" startline="292" endline="348" pcid="813">
def test_analysis_topic_no_header(publish_agent, query_agent):
    """
    Test if devices topic message is getting forwarded to historian running on
    another instance. Test if topic name substitutions happened.
    Publish to topic
    'analysis/PNNL/BUILDING_1/Device/MixedAirTemperature' in volttron_instance1 and
    query for topic
    'PNNL/BUILDING1_ANON/Device/MixedAirTemperature' in volttron_instance
    @param publish_agent: Fake agent used to publish messages to bus in
    volttron_instance1. Calling this fixture makes sure all the dependant
    fixtures are called to setup and start volttron_instance1 and forwareder
    agent and returns the  instance of fake agent to publish
    @param query_agent: Fake agent used to query sqlhistorian in
    volttron_instance. Calling this fixture makes sure all the dependant
    fixtures are called to setup and start volttron_instance and sqlhistorian
    agent and returns the instance of a fake agent to query the historian
    """
    print("\n** test_analysis_topic **")
    # Publish fake data. The format mimics the format used by VOLTTRON drivers.
    # Make some random readings
    oat_reading = random.uniform(30, 100)
    mixed_reading = oat_reading + random.uniform(-5, 5)
    damper_reading = random.uniform(0, 100)

    # Create a message for all points.
    all_message = [{'OutsideAirTemperature': oat_reading,
                    'MixedAirTemperature': mixed_reading,
                    'DamperSignal': damper_reading},
                   {'OutsideAirTemperature': {'units': 'F', 'tz': 'UTC',
                                              'type': 'float'},
                    'MixedAirTemperature': {'units': 'F', 'tz': 'UTC',
                                            'type': 'float'},
                    'DamperSignal': {'units': '%', 'tz': 'UTC',
                                     'type': 'float'}
                    }]

    # Create timestamp
    now = datetime.utcnow().isoformat() + 'Z'
    print("now is ", now)

    # Publish messages
    publish(publish_agent, 'analysis/PNNL/BUILDING_1/Device', None, all_message)
    gevent.sleep(0.5)

    # pytest.set_trace()
    # Query the historian
    result = query_agent.vip.rpc.call(
        'platform.historian',
        'query',
        topic='PNNL/BUILDING1_ANON/Device/MixedAirTemperature',
        start=now,
        order="LAST_TO_FIRST").get(timeout=10)
    print('Query Result', result)
    assert (len(result['values']) == 1)
    assert (result['values'][0][1] == approx(mixed_reading))


</source>
</class>

<class classid="12" nclones="2" nlines="26" similarity="100">
<source file="E:/Git/II/latest/volttron/services/core/DataMover/tests/test_datamover.py" startline="439" endline="497" pcid="630">
def test_log_topic(publish_agent, query_agent):
    """
    Test if log topic message is getting forwarded to historian running on
    another instance. Test if topic name substitutions happened.
    Publish to topic
    'datalogger/PNNL/BUILDING_1/Device' in volttron_instance1 and
    query for topic
    'datalogger/PNNL/BUILDING1_ANON/Device/MixedAirTemperature' in
    volttron_instance2
    Expected result:
     Record should get entered into database with current time at time of
     insertion and should ignore timestamp in header. Topic name
     substitution should have happened
    :param publish_agent: Fake agent used to publish messages to bus in
    volttron_instance1. Calling this fixture makes sure all the dependant
    fixtures are called to setup and start volttron_instance1 and forwareder
    agent and returns the  instance of fake agent to publish
    :param query_agent: Fake agent used to query sqlhistorian in
    volttron_instance2. Calling this fixture makes sure all the dependant
    fixtures are called to setup and start volttron_instance2 and sqlhistorian
    agent and returns the instance of a fake agent to query the historian
    """
    print("\n** test_log_topic **")
    # Publish fake data. The format mimics the format used by VOLTTRON drivers.
    # Make some random readings
    oat_reading = random.uniform(30, 100)
    mixed_reading = oat_reading + random.uniform(-5, 5)

    # Create a message for all points.
    message = {'MixedAirTemperature': {'Readings': mixed_reading,
                                       'Units': 'F',
                                       'tz': 'UTC',
                                       'type': 'float'}}
    # Create timestamp
    current_time = utils.format_timestamp(datetime.utcnow())
    print("current_time is ", current_time)
    future_time = '2017-12-02T00:00:00'
    headers = {
        headers_mod.DATE: future_time,
        headers_mod.TIMESTAMP: future_time
    }
    print("time in header is ", future_time)

    # Publish messages
    publish(publish_agent, "datalogger/PNNL/BUILDING_1/Device", headers, message)
    gevent.sleep(1)

    # Query the historian
    result = query_agent.vip.rpc.call(
        'platform.historian',
        'query',
        start=current_time,
        topic="datalogger/PNNL/BUILDING1_ANON/Device/MixedAirTemperature",
        order="LAST_TO_FIRST").get(timeout=10)
    print('Query Result', result)
    assert (len(result['values']) == 1)
    assert (result['values'][0][1] == approx(mixed_reading))


</source>
<source file="E:/Git/II/latest/volttron/services/core/ForwardHistorian/tests/test_forward_historian.py" startline="351" endline="410" pcid="814">
def test_log_topic(publish_agent, query_agent):
    """
    Test if log topic message is getting forwarded to historian running on
    another instance. Test if topic name substitutions happened.
    Publish to topic
    'datalogger/PNNL/BUILDING_1/Device' in volttron_instance1 and
    query for topic
    'datalogger/PNNL/BUILDING1_ANON/Device/MixedAirTemperature' in
    volttron_instance
    Expected result:
     Record should get entered into database with current time at time of
     insertion and should ignore timestamp in header. Topic name
     substitution should have happened
    @param publish_agent: Fake agent used to publish messages to bus in
    volttron_instance1. Calling this fixture makes sure all the dependant
    fixtures are called to setup and start volttron_instance1 and forwareder
    agent and returns the  instance of fake agent to publish
    @param query_agent: Fake agent used to query sqlhistorian in
    volttron_instance. Calling this fixture makes sure all the dependant
    fixtures are called to setup and start volttron_instance and sqlhistorian
    agent and returns the instance of a fake agent to query the historian
    """
    print("\n** test_log_topic **")
    # Publish fake data. The format mimics the format used by VOLTTRON drivers.
    # Make some random readings
    oat_reading = random.uniform(30, 100)
    mixed_reading = oat_reading + random.uniform(-5, 5)

    # Create a message for all points.
    message = {'MixedAirTemperature': {'Readings': mixed_reading,
                                       'Units': 'F',
                                       'tz': 'UTC',
                                       'type': 'float'}}
    # pytest.set_trace()
    # Create timestamp
    current_time = utils.format_timestamp(datetime.utcnow())
    print("current_time is ", current_time)
    future_time = '2017-12-02T00:00:00'
    headers = {
        headers_mod.DATE: future_time,
        headers_mod.TIMESTAMP: future_time
    }
    print("time in header is ", future_time)

    # Publish messages
    publish(publish_agent, "datalogger/PNNL/BUILDING_1/Device", headers, message)
    gevent.sleep(1)

    # Query the historian
    result = query_agent.vip.rpc.call(
        'platform.historian',
        'query',
        start=current_time,
        topic="datalogger/PNNL/BUILDING1_ANON/Device/MixedAirTemperature",
        order="LAST_TO_FIRST").get(timeout=10)
    print('Query Result', result)
    assert (len(result['values']) == 1)
    assert (result['values'][0][1] == approx(mixed_reading))


</source>
</class>

<class classid="13" nclones="2" nlines="21" similarity="100">
<source file="E:/Git/II/latest/volttron/services/core/DataMover/tests/test_datamover.py" startline="500" endline="545" pcid="631">
def test_log_topic_no_header(publish_agent, query_agent):
    """
    Test if log topic message is getting forwarded to historian running on
    another instance. Test if topic name substitutions happened.
    Publish to topic
    'datalogger/PNNL/BUILDING_1/Device' in volttron_instance1 and
    query for topic
    'datalogger/PNNL/BUILDING1_ANON/Device/MixedAirTemperature' in
    volttron_instance2
    :param publish_agent: Fake agent used to publish messages to bus in
    volttron_instance1. Calling this fixture makes sure all the dependant
    fixtures are called to setup and start volttron_instance1 and forwareder
    agent and returns the  instance of fake agent to publish
    :param query_agent: Fake agent used to query sqlhistorian in
    volttron_instance2. Calling this fixture makes sure all the dependant
    fixtures are called to setup and start volttron_instance2 and sqlhistorian
    agent and returns the instance of a fake agent to query the historian
    """
    print("\n** test_log_topic **")
    # Publish fake data. The format mimics the format used by VOLTTRON drivers.
    # Make some random readings
    oat_reading = random.uniform(30, 100)
    mixed_reading = oat_reading + random.uniform(-5, 5)
    current_time = datetime.utcnow().isoformat()
    # Create a message for all points.
    message = {'MixedAirTemperature': {'Readings': mixed_reading,
                                       'Units': 'F',
                                       'tz': 'UTC',
                                       'type': 'float'}}
    gevent.sleep(1)  # sleep so that there is no side effect from earlier test
    # Publish messages
    publish(publish_agent, "datalogger/PNNL/BUILDING_1/Device", None, message)
    gevent.sleep(0.5)

    # Query the historian
    result = query_agent.vip.rpc.call(
        'platform.historian',
        'query',
        topic="datalogger/PNNL/BUILDING1_ANON/Device/MixedAirTemperature",
        start=current_time,
        order="LAST_TO_FIRST").get(timeout=10)
    print('Query Result', result)
    assert (len(result['values']) == 1)
    assert (result['values'][0][1] == approx(mixed_reading))


</source>
<source file="E:/Git/II/latest/volttron/services/core/ForwardHistorian/tests/test_forward_historian.py" startline="413" endline="458" pcid="815">
def test_log_topic_no_header(publish_agent, query_agent):
    """
    Test if log topic message is getting forwarded to historian running on
    another instance. Test if topic name substitutions happened.
    Publish to topic
    'datalogger/PNNL/BUILDING_1/Device' in volttron_instance1 and
    query for topic
    'datalogger/PNNL/BUILDING1_ANON/Device/MixedAirTemperature' in
    volttron_instance
    @param publish_agent: Fake agent used to publish messages to bus in
    volttron_instance1. Calling this fixture makes sure all the dependant
    fixtures are called to setup and start volttron_instance1 and forwareder
    agent and returns the  instance of fake agent to publish
    @param query_agent: Fake agent used to query sqlhistorian in
    volttron_instance. Calling this fixture makes sure all the dependant
    fixtures are called to setup and start volttron_instance and sqlhistorian
    agent and returns the instance of a fake agent to query the historian
    """
    print("\n** test_log_topic **")
    # Publish fake data. The format mimics the format used by VOLTTRON drivers.
    # Make some random readings
    oat_reading = random.uniform(30, 100)
    mixed_reading = oat_reading + random.uniform(-5, 5)
    current_time = datetime.utcnow().isoformat()
    # Create a message for all points.
    message = {'MixedAirTemperature': {'Readings': mixed_reading,
                                       'Units': 'F',
                                       'tz': 'UTC',
                                       'type': 'float'}}
    gevent.sleep(1)  # sleep so that there is no side effect from earlier test
    # Publish messages
    publish(publish_agent, "datalogger/PNNL/BUILDING_1/Device", None, message)
    gevent.sleep(0.5)

    # Query the historian
    result = query_agent.vip.rpc.call(
        'platform.historian',
        'query',
        topic="datalogger/PNNL/BUILDING1_ANON/Device/MixedAirTemperature",
        start=current_time,
        order="LAST_TO_FIRST").get(timeout=10)
    print('Query Result', result)
    assert (len(result['values']) == 1)
    assert (result['values'][0][1] == approx(mixed_reading))


</source>
</class>

<class classid="14" nclones="2" nlines="34" similarity="100">
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/platform_driver/interfaces/modbus_tk/tests/test_scale_reg.py" startline="49" endline="102" pcid="1048">
def agent(request, volttron_instance):
    """Build PlatformDriverAgent, add modbus driver & csv configurations
    """

    # Build platform driver agent
    md_agent = volttron_instance.build_agent(identity="test_md_agent")
    capabilities = {'edit_config_store': {'identity': PLATFORM_DRIVER}}
    volttron_instance.add_capabilities(md_agent.core.publickey, capabilities)

    # Clean out platform driver configurations
    # wait for it to return before adding new config
    md_agent.vip.rpc.call('config.store',
                          'manage_delete_store',
                          PLATFORM_DRIVER).get()

    # Add driver configurations
    md_agent.vip.rpc.call('config.store',
                          'manage_store',
                          PLATFORM_DRIVER,
                          'devices/modbus_tk',
                          DRIVER_CONFIG_STRING,
                          config_type='json')

    # Add csv configurations
    md_agent.vip.rpc.call('config.store',
                          'manage_store',
                          PLATFORM_DRIVER,
                          'modbus_tk.csv',
                          REGISTRY_CONFIG_STRING,
                          config_type='csv')

    md_agent.vip.rpc.call('config.store',
                          'manage_store',
                          PLATFORM_DRIVER,
                          'modbus_tk_map.csv',
                          REGISTER_MAP,
                          config_type='csv')

    platform_uuid = volttron_instance.install_agent(agent_dir=get_services_core("PlatformDriverAgent"),
                                                   config_file={},
                                                   start=True)

    gevent.sleep(10)  # wait for the agent to start and start the devices

    def stop():
        """Stop platform driver agent
        """
        volttron_instance.stop_agent(platform_uuid)
        md_agent.core.stop()

    request.addfinalizer(stop)
    return md_agent


</source>
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/platform_driver/interfaces/modbus_tk/tests/test_scale_reg_pow_10.py" startline="49" endline="102" pcid="1060">
def agent(request, volttron_instance):
    """Build PlatformDriverAgent, add modbus driver & csv configurations
    """

    # Build platform driver agent
    md_agent = volttron_instance.build_agent(identity="test_md_agent")
    capabilities = {'edit_config_store': {'identity': PLATFORM_DRIVER}}
    volttron_instance.add_capabilities(md_agent.core.publickey, capabilities)

    # Clean out platform driver configurations
    # wait for it to return before adding new config
    md_agent.vip.rpc.call('config.store',
                          'manage_delete_store',
                          PLATFORM_DRIVER).get()

    # Add driver configurations
    md_agent.vip.rpc.call('config.store',
                          'manage_store',
                          PLATFORM_DRIVER,
                          'devices/modbus_tk',
                          DRIVER_CONFIG_STRING,
                          config_type='json')

    # Add csv configurations
    md_agent.vip.rpc.call('config.store',
                          'manage_store',
                          PLATFORM_DRIVER,
                          'modbus_tk.csv',
                          REGISTRY_CONFIG_STRING,
                          config_type='csv')

    md_agent.vip.rpc.call('config.store',
                          'manage_store',
                          PLATFORM_DRIVER,
                          'modbus_tk_map.csv',
                          REGISTER_MAP,
                          config_type='csv')

    platform_uuid = volttron_instance.install_agent(agent_dir=get_services_core("PlatformDriverAgent"),
                                                   config_file={},
                                                   start=True)

    gevent.sleep(10)  # wait for the agent to start and start the devices

    def stop():
        """Stop platform driver agent
        """
        volttron_instance.stop_agent(platform_uuid)
        md_agent.core.stop()

    request.addfinalizer(stop)
    return md_agent


</source>
</class>

<class classid="15" nclones="3" nlines="6" similarity="100">
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/platform_driver/interfaces/modbus_tk/tests/test_scale_reg.py" startline="172" endline="181" pcid="1056">
    def test_default_values(self, agent):
        """Set all default values to 0 and check reading those values."""
        self.revert_all(agent)

        default_values = self.scrape_all(agent)
        assert type(default_values) is dict

        for key in default_values.keys():
            assert default_values[key] == 0

</source>
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/platform_driver/interfaces/modbus_tk/tests/test_scale_reg_pow_10.py" startline="172" endline="181" pcid="1068">
    def test_default_values(self, agent):
        """Set all default values to 0 and check reading those values."""
        self.revert_all(agent)

        default_values = self.scrape_all(agent)
        assert type(default_values) is dict

        for key in default_values.keys():
            assert default_values[key] == 0

</source>
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/platform_driver/interfaces/modbus_tk/tests/test_write_single_registers.py" startline="168" endline="178" pcid="1088">
    def test_default_values(self, agent):
        """Test set default values
        """
        self.revert_all(agent)

        default_values = self.scrape_all(agent)
        assert type(default_values) is dict

        for key in default_values.keys():
            assert default_values[key] == 0

</source>
</class>

<class classid="16" nclones="3" nlines="6" similarity="100">
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/platform_driver/interfaces/modbus_tk/tests/test_scale_reg.py" startline="203" endline="211" pcid="1059">
    def test_revert_all(self, agent):
        """Test revert device to default values."""
        self.revert_all(agent)

        default_values = self.scrape_all(agent)
        assert type(default_values) is dict

        for key in default_values.keys():
            assert default_values[key] == 0
</source>
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/platform_driver/interfaces/modbus_tk/tests/test_write_single_registers.py" startline="206" endline="215" pcid="1092">
    def test_revert_all(self, agent):
        """Test revert device to default values
        """
        self.revert_all(agent)

        default_values = self.scrape_all(agent)
        assert type(default_values) is dict

        for key in default_values.keys():
            assert default_values[key] == 0
</source>
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/platform_driver/interfaces/modbus_tk/tests/test_scale_reg_pow_10.py" startline="203" endline="211" pcid="1071">
    def test_revert_all(self, agent):
        """Test revert device to default values."""
        self.revert_all(agent)

        default_values = self.scrape_all(agent)
        assert type(default_values) is dict

        for key in default_values.keys():
            assert default_values[key] == 0
</source>
</class>

<class classid="17" nclones="2" nlines="7" similarity="100">
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/tests/test_device_groups.py" startline="78" endline="92" pcid="1177">
def subscriber_agent(volttron_instance):

    agent = volttron_instance.build_agent(
        identity="subscriber_agent", agent_class=_subscriber_agent
    )

    agent.vip.pubsub.subscribe(
        peer="pubsub", prefix=topics.DRIVER_TOPIC_BASE, callback=agent.add_result
    ).get()

    yield agent

    agent.core.stop()


</source>
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/tests/test_device_groups_p2.py" startline="167" endline="181" pcid="1190">
def subscriber_agent(volttron_instance):

    agent = volttron_instance.build_agent(
        identity="subscriber_agent", agent_class=_subscriber_agent
    )

    agent.vip.pubsub.subscribe(
        peer="pubsub", prefix=topics.DRIVER_TOPIC_BASE, callback=agent.add_result
    ).get()

    yield agent

    agent.core.stop()


</source>
</class>

<class classid="18" nclones="3" nlines="21" similarity="100">
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/tests/test_device_groups.py" startline="124" endline="163" pcid="1178">
def test_agent(volttron_instance):
    """
    Build a test_agent, PlatformDriverAgent
    """

    # Build a test agent
    md_agent = volttron_instance.build_agent(identity="test_md_agent")
    gevent.sleep(1)

    if volttron_instance.auth_enabled:
        capabilities = {"edit_config_store": {"identity": PLATFORM_DRIVER}}
        volttron_instance.add_capabilities(md_agent.core.publickey, capabilities)

    # Clean out platform driver configurations
    # wait for it to return before adding new config
    md_agent.vip.rpc.call("config.store", "manage_delete_store", PLATFORM_DRIVER).get()

    # Add a fake.csv to the config store
    md_agent.vip.rpc.call(
        "config.store",
        "manage_store",
        PLATFORM_DRIVER,
        "fake.csv",
        registry_config_string,
        config_type="csv",
    ).get()

    # install the PlatformDriver
    platform_uuid = volttron_instance.install_agent(
        agent_dir=get_services_core("PlatformDriverAgent"), config_file={}, start=True
    )

    gevent.sleep(10)  # wait for the agent to start and start the devices

    yield md_agent

    volttron_instance.stop_agent(platform_uuid)
    md_agent.core.stop()


</source>
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/tests/test_device_groups_p2.py" startline="183" endline="222" pcid="1191">
def test_agent(volttron_instance):
    """
    Build a test_agent, PlatformDriverAgent
    """

    # Build a test agent
    md_agent = volttron_instance.build_agent(identity="test_md_agent")
    gevent.sleep(1)

    if volttron_instance.auth_enabled:
        capabilities = {"edit_config_store": {"identity": PLATFORM_DRIVER}}
        volttron_instance.add_capabilities(md_agent.core.publickey, capabilities)

    # Clean out platform driver configurations
    # wait for it to return before adding new config
    md_agent.vip.rpc.call("config.store", "manage_delete_store", PLATFORM_DRIVER).get()

    # Add a fake.csv to the config store
    md_agent.vip.rpc.call(
        "config.store",
        "manage_store",
        PLATFORM_DRIVER,
        "fake.csv",
        registry_config_string,
        config_type="csv",
    ).get()

    # install the PlatformDriver
    platform_uuid = volttron_instance.install_agent(
        agent_dir=get_services_core("PlatformDriverAgent"), config_file={}, start=True
    )

    gevent.sleep(10)  # wait for the agent to start and start the devices

    yield md_agent

    volttron_instance.stop_agent(platform_uuid)
    md_agent.core.stop()


</source>
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/tests/test_global_settings.py" startline="155" endline="194" pcid="1250">
def test_agent(volttron_instance):
    """
    Build a test_agent, PlatformDriverAgent
    """

    # Build a test agent
    md_agent = volttron_instance.build_agent(identity="test_md_agent")
    gevent.sleep(1)

    if volttron_instance.auth_enabled:
        capabilities = {"edit_config_store": {"identity": PLATFORM_DRIVER}}
        volttron_instance.add_capabilities(md_agent.core.publickey, capabilities)

    # Clean out platform driver configurations
    # wait for it to return before adding new config
    md_agent.vip.rpc.call("config.store", "manage_delete_store", PLATFORM_DRIVER).get()

    # Add a fake.csv to the config store
    md_agent.vip.rpc.call(
        "config.store",
        "manage_store",
        PLATFORM_DRIVER,
        "fake.csv",
        registry_config_string,
        config_type="csv",
    ).get()

    # install the PlatformDriver
    platform_uuid = volttron_instance.install_agent(
        agent_dir=get_services_core("PlatformDriverAgent"), config_file={}, start=True
    )

    gevent.sleep(10)  # wait for the agent to start and start the devices

    yield md_agent

    volttron_instance.stop_agent(platform_uuid)
    md_agent.core.stop()


</source>
</class>

<class classid="19" nclones="3" nlines="11" similarity="100">
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/tests/test_device_groups.py" startline="164" endline="176" pcid="1179">
def setup_config(test_agent, config_name, config_string, **kwargs):
    config = config_string.format(**kwargs)
    print("Adding", config_name, "to store")
    test_agent.vip.rpc.call(
        "config.store",
        "manage_store",
        PLATFORM_DRIVER,
        config_name,
        config,
        config_type="json",
    ).get()


</source>
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/tests/test_device_groups_p2.py" startline="223" endline="235" pcid="1192">
def setup_config(test_agent, config_name, config_string, **kwargs):
    config = config_string.format(**kwargs)
    print("Adding", config_name, "to store")
    test_agent.vip.rpc.call(
        "config.store",
        "manage_store",
        PLATFORM_DRIVER,
        config_name,
        config,
        config_type="json",
    ).get()


</source>
<source file="E:/Git/II/latest/volttron/services/core/PlatformDriverAgent/tests/test_global_settings.py" startline="195" endline="207" pcid="1251">
def setup_config(test_agent, config_name, config_string, **kwargs):
    config = config_string.format(**kwargs)
    print("Adding", config_name, "to store")
    test_agent.vip.rpc.call(
        "config.store",
        "manage_store",
        PLATFORM_DRIVER,
        config_name,
        config,
        config_type="json",
    ).get()


</source>
</class>

<class classid="20" nclones="2" nlines="5" similarity="100">
<source file="E:/Git/II/latest/volttron/services/core/VolttronCentral/tests/test_platforms.py" startline="11" endline="17" pcid="1319">
def mock_vc():
    VolttronCentralAgent.__bases__ = (AgentMock.imitate(Agent, VolttronCentralAgent()),)
    vc = VolttronCentralAgent()
    vc._configure("test_config", "NEW", {})
    yield vc


</source>
<source file="E:/Git/II/latest/volttron/services/core/VolttronCentral/tests/test_vc.py" startline="62" endline="68" pcid="1323">
def mock_vc():
    VolttronCentralAgent.__bases__ = (AgentMock.imitate(Agent, VolttronCentralAgent()),)
    vc = VolttronCentralAgent()
    vc._configure("test_config", "NEW", {})
    yield vc


</source>
</class>

<class classid="21" nclones="2" nlines="5" similarity="100">
<source file="E:/Git/II/latest/volttron/volttron/platform/upgrade/move_sqlite_files.py" startline="51" endline="59" pcid="2092">
def get_aip():
    """Get AIPplatform to interface with agent directories in vhome"""

    vhome = get_home()
    options = type("Options", (), dict(volttron_home=vhome))
    aip = AIPplatform(options)
    return aip


</source>
<source file="E:/Git/II/latest/volttron/volttron/platform/upgrade/update_auth_file.py" startline="49" endline="57" pcid="2099">
def get_aip():
    """Get AIPplatform to interface with agent directories in vhome"""

    vhome = get_home()
    options = type("Options", (), dict(volttron_home=vhome))
    aip = AIPplatform(options)
    return aip


</source>
</class>

<class classid="22" nclones="4" nlines="5" similarity="100">
<source file="E:/Git/II/latest/volttron/volttron/platform/upgrade/move_sqlite_files.py" startline="105" endline="113" pcid="2095">
def _main():
    """ Wrapper for main function"""

    try:
        sys.exit(main())
    except KeyboardInterrupt:
        sys.exit(1)


</source>
<source file="E:/Git/II/latest/volttron/volttron/platform/upgrade/upgrade_volttron.py" startline="63" endline="69" pcid="2107">
def _main():
    """ Wrapper for main function"""
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        sys.exit(1)

</source>
<source file="E:/Git/II/latest/volttron/volttron/platform/upgrade/rename_config_for_agent_isolation.py" startline="65" endline="72" pcid="2098">
def _main():
    """ Wrapper for main function"""
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        sys.exit(1)


</source>
<source file="E:/Git/II/latest/volttron/volttron/platform/upgrade/update_auth_file.py" startline="156" endline="164" pcid="2105">
def _main():
    """ Wrapper for main function"""

    try:
        sys.exit(main())
    except KeyboardInterrupt:
        sys.exit(1)


</source>
</class>

<class classid="23" nclones="4" nlines="6" similarity="100">
<source file="E:/Git/II/latest/volttron/volttron/platform/vip/agent/subsystems/hello.py" startline="123" endline="128" pcid="2196">
    def _handle_error(self, sender, message, error, **kwargs):
        try:
            result = self._results.pop(message.id)
        except KeyError:
            return
        result.set_exception(error)
</source>
<source file="E:/Git/II/latest/volttron/volttron/platform/vip/agent/subsystems/peerlist.py" startline="173" endline="178" pcid="2203">
    def _handle_error(self, sender, message, error, **kwargs):
        try:
            result = self._results.pop(message.id)
        except KeyError:
            return
        result.set_exception(error)
</source>
<source file="E:/Git/II/latest/volttron/volttron/platform/vip/agent/subsystems/query.py" startline="92" endline="97" pcid="2211">
    def _handle_error(self, sender, message, error, **kwargs):
        try:
            result = self._results.pop(message.id)
        except KeyError:
            return
        result.set_exception(error)
</source>
<source file="E:/Git/II/latest/volttron/volttron/platform/vip/agent/subsystems/ping.py" startline="100" endline="105" pcid="2207">
    def _handle_error(self, sender, message, error, **kwargs):
        try:
            result = self._results.pop(message.id)
        except KeyError:
            return
        result.set_exception(error)
</source>
</class>

<class classid="24" nclones="2" nlines="7" similarity="100">
<source file="E:/Git/II/latest/volttron/volttrontesting/platform/auth_tests/conftest.py" startline="1" endline="7" pcid="2487">
def assert_auth_entries_same(e1, e2):
    for field in ['domain', 'address', 'user_id', 'credentials', 'comments',
                  'enabled']:
        assert e1[field] == e2[field]
    for field in ['roles', 'groups']:
        assert set(e1[field]) == set(e2[field])
    assert e1['capabilities'] == e2['capabilities']
</source>
<source file="E:/Git/II/latest/volttron/volttrontesting/platform/auth_tests/test_auth_control.py" startline="174" endline="182" pcid="2497">
def assert_auth_entries_same(e1, e2):
    for field in ['domain', 'address', 'user_id', 'credentials', 'comments',
                  'enabled']:
        assert e1[field] == e2[field]
    for field in ['roles', 'groups']:
        assert set(e1[field]) == set(e2[field])
    assert e1['capabilities'] == e2['capabilities']


</source>
</class>

<class classid="25" nclones="2" nlines="9" similarity="100">
<source file="E:/Git/II/latest/volttron/volttrontesting/platform/base_market_agent/test_poly_line.py" startline="155" endline="165" pcid="2588">
def create_supply_curve():
    supply_curve = PolyLine()
    price = 0
    quantity = 0
    supply_curve.add(Point(price,quantity))
    price = 1000
    quantity = 1000
    supply_curve.add(Point(price,quantity))
    return supply_curve


</source>
<source file="E:/Git/II/latest/volttron/volttrontesting/platform/base_market_agent/test_poly_line_factory.py" startline="82" endline="92" pcid="2593">
def create_supply_curve():
    supply_curve = PolyLine()
    price = 0
    quantity = 0
    supply_curve.add(Point(price,quantity))
    price = 1000
    quantity = 1000
    supply_curve.add(Point(price,quantity))
    return supply_curve


</source>
</class>

<class classid="26" nclones="3" nlines="7" similarity="100">
<source file="E:/Git/II/latest/volttron/volttrontesting/services/historian/test_base_historian.py" startline="79" endline="88" pcid="2760">
    def remove_backup_cache_db(self):
        try:
            print(f"Removing backup cache  {self.backup_sqlite}")
            os.remove(str(self.backup_sqlite))
            os.remove(str(self.agent_data_dir))
        except:
            print("Don't throw here if os.remove fails...")



</source>
<source file="E:/Git/II/latest/volttron/volttrontesting/services/historian/test_base_historian.py" startline="119" endline="128" pcid="2765">
    def remove_backup_cache_db(self):
        try:
            print(f"Removing backup cache  {self.backup_sqlite}")
            os.remove(str(self.backup_sqlite))
            os.remove(str(self.agent_data_dir))
        except:
            print("Don't throw here if os.remove fails...")



</source>
<source file="E:/Git/II/latest/volttron/volttrontesting/services/historian/test_base_historian.py" startline="570" endline="577" pcid="2777">
    def remove_backup_cache_db(self):
        try:
            print(f"Removing backup cache  {self.backup_sqlite}")
            os.remove(str(self.backup_sqlite))
            os.remove(str(self.agent_data_dir))
        except:
            print("Don't throw here if os.remove fails...")

</source>
</class>

<class classid="27" nclones="2" nlines="9" similarity="100">
<source file="E:/Git/II/latest/volttron/volttrontesting/zmq/test_zmq.py" startline="52" endline="62" pcid="2898">
def broker():
    pub = zmq.Socket(ctx, zmq.PUB)
    pull = zmq.Socket(ctx, zmq.PULL)
    pub.bind('ipc:///tmp/volttron-platform-agent-subscribe')
    pull.bind('ipc:///tmp/volttron-platform-agent-publish')
    while True:
        message = pull.recv_multipart()
        print(message)
        pub.send_multipart(message)


</source>
<source file="E:/Git/II/latest/volttron/volttrontesting/zmq/test_zmqsub.py" startline="51" endline="61" pcid="2902">
def broker():
    pub = zmq.Socket(ctx, zmq.PUB)
    pull = zmq.Socket(ctx, zmq.PULL)
    pub.bind('ipc:///tmp/volttron-platform-agent-subscribe')
    pull.bind('ipc:///tmp/volttron-platform-agent-publish')
    while True:
        message = pull.recv_multipart()
        print(message)
        pub.send_multipart(message)


</source>
</class>

<class classid="28" nclones="2" nlines="11" similarity="100">
<source file="E:/Git/II/latest/volttron/volttrontesting/zmq/test_zmq.py" startline="63" endline="75" pcid="2899">
def publisher():
    push = zmq.Socket(ctx, zmq.PUSH)
    push.connect('ipc:///tmp/volttron-platform-agent-publish')
    while True:
        sys.stdout.write('Topic: ')
        sys.stdout.flush()
        topic = sys.stdin.readline()
        sys.stdout.write('Message: ')
        sys.stdout.flush()
        message = sys.stdin.readline()
        push.send_multipart([topic, message])


</source>
<source file="E:/Git/II/latest/volttron/volttrontesting/zmq/test_zmqsub.py" startline="62" endline="74" pcid="2903">
def publisher():
    push = zmq.Socket(ctx, zmq.PUSH)
    push.connect('ipc:///tmp/volttron-platform-agent-publish')
    while True:
        sys.stdout.write('Topic: ')
        sys.stdout.flush()
        topic = sys.stdin.readline()
        sys.stdout.write('Message: ')
        sys.stdout.flush()
        message = sys.stdin.readline()
        push.send_multipart([topic, message])


</source>
</class>

<class classid="29" nclones="2" nlines="6" similarity="100">
<source file="E:/Git/II/latest/volttron/volttrontesting/zmq/test_zmq.py" startline="76" endline="82" pcid="2900">
def subscriber():
    sub = zmq.Socket(ctx, zmq.SUB)
    sub.connect('ipc:///tmp/volttron-platform-agent-subscribe')
    sub.subscribe = ''
    while True:
        print(sub.recv_multipart())

</source>
<source file="E:/Git/II/latest/volttron/volttrontesting/zmq/test_zmqsub.py" startline="75" endline="81" pcid="2904">
def subscriber():
    sub = zmq.Socket(ctx, zmq.SUB)
    sub.connect('ipc:///tmp/volttron-platform-agent-subscribe')
    sub.subscribe = ''
    while True:
        print(sub.recv_multipart())

</source>
</class>

</clones>
